/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useLoader,useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import pave from './pave.gltf'

export default function Pave(props) {
  const tempObject = new THREE.Object3D()
  const number = 299
  const mesh = useRef();
  window.mesh = mesh
  
  useFrame((state) => {
    const widthMesh = nodes.Pave.geometry.boundingBox.max.x*2 +0.01
    const heightMesh = nodes.Pave.geometry.boundingBox.max.y *2 +0.01
    
    const posX = state.viewport.width/2 * -1
    const posY = state.viewport.height/2 * 1

    const factorX = state.viewport.width / widthMesh
    const factorY = state.viewport.height / heightMesh

  let i = 0

    for (let x = 0; x < factorX; x++){
      for (let y = 0; y < factorY; y++) {
        const id = i++
        tempObject.position.set(posX + (x * widthMesh), posY- (y*heightMesh/**Math.random()*/), 0)
        tempObject.updateMatrix()
        mesh.current.setMatrixAt(id, tempObject.matrix)
      } 
    }

  })

  const { nodes, materials } = useLoader(GLTFLoader, pave)
    

  return (
      <instancedMesh ref={mesh} material={materials.paveMat} geometry={nodes.Pave.geometry} args={[null, null, number]} />
  )
}
